* packages
  #+BEGIN_SRC emacs-lisp
    (defvar woocat/packages '(
			      org
			      ivy
			      swiper
			      evil
			      evil-leader
			      smartparens
			      exec-path-from-shell
			      popwin
			      hungry-delete
			      google-translate
			      avy
			      window-numbering
			      company
			      magit
			      evil-magit
			      flycheck
			      go-mode
			      go-eldoc
			      company-go
			      go-guru
			      rainbow-delimiters
			      counsel-projectile
			      smart-mode-line
			      use-package
			      diminish
			      bind-key
			      ggtags
			      js2-mode
			      company-tern
			      gotest
			      )) 
    (setq package-selected-packages woocat/packages)
    (package-install-selected-packages)
  #+END_SRC

* func 
  #+BEGIN_SRC emacs-lisp
    ;; function to open init file
    (defun open-my-init-file()
      (interactive)
      (find-file "~/.emacs.d/org/init.org"))
    ;; function and micro to open browser,and search from google,
    ;; baidu, youtube, github and so on
    (defun prelude-search (query-url prompt)
      "Open the search url constructed with the QUERY-URL.
    PROMPT sets the `read-string prompt."
      (browse-url
       (concat query-url
	       (url-hexify-string
		(if mark-active
		    (buffer-substring (region-beginning) (region-end))
		  (read-string prompt))))))

    (defmacro prelude-install-search-engine (search-engine-name search-engine-url search-engine-prompt)
      "Given some information regarding a search engine, install the interactive command to search through them"
      `(defun ,(intern (format "prelude-%s" search-engine-name)) ()
	 ,(format "Search %s with a query or region if any." search-engine-name)
	 (interactive)
	 (prelude-search ,search-engine-url ,search-engine-prompt)))

    (prelude-install-search-engine "google"     "http://www.google.com/search?q="              "Google: ")
    (prelude-install-search-engine "youtube"    "http://www.youtube.com/results?search_query=" "Search YouTube: ")
    (prelude-install-search-engine "github"     "https://github.com/search?q="                 "Search GitHub: ")
    (prelude-install-search-engine "baidu" "https://www.baidu.com/s?wd="              "Baidu:")
    (defun switch-to-previous-buffer ()
      "Switch to previously open buffer.
    Repeated invocations toggle between the two most recently open buffers."
      (interactive)
      (switch-to-buffer (other-buffer (current-buffer) 1)))
    (defun my-imenu-rescan ()
      (interactive)
      (imenu 'func))
    (defun eshell-toggle ()
      "Opens up a new shell in the directory associated with the
    current buffer's file. The eshell is renamed to match that
    directory to make multiple eshell windows easier."
      (interactive)
      (let* ((parent (if (buffer-file-name)
			 (file-name-directory (buffer-file-name))
		       default-directory))
	     (height (/ (window-total-height) 3))
	     (name   (car (last (split-string parent "/" t)))))
	(split-window-vertically (- height))
	(other-window 1)
	;; if eshell buffer exsit, then switch to eshell buffer
	;; (insert (concat "cd" parent))
	;; (rename-buffer (concat "*eshell: " name "*"))
	;; (eshell-send-input)
	(eshell "new")
	(rename-buffer (concat "*eshell: " name "*"))
	(eshell-send-input)))
    ;Clear the eshell buffer.
    (defun eshell/clear ()      
       (let ((eshell-buffer-maximum-lines 0)) (eshell-truncate-buffer)))

    (defun woocat/switch-project (&optional arg)
      "Switch to a project we have visited before.

    Invokes the command referenced by
    `projectile-switch-project-action' on switch.  With a prefix ARG
    invokes `projectile-commander' instead of
    `projectile-switch-project-action.'"
      (interactive "P")
      (ivy-read (projectile-prepend-project-name "Switch to project: ")
		projectile-known-projects
		:preselect (and (projectile-project-p)
				(abbreviate-file-name (projectile-project-root)))
		:action (lambda (dir)
			  (dired-at-point dir))
		:require-match t
		:caller 'woocat/switch-project))
  #+END_SRC

* ui
  #+BEGIN_SRC emacs-lisp
    (set-default-font "Inconsolata 18" nil t)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
			charset (font-spec :family "WenQuanYi Micro Hei" :size 24)))
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (setq inhibit-splash-screen t)
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    ;;(use-package smart-mode-line
    ;;  :ensure t)
    (use-package leuven-theme
      :ensure t)
    (load-theme 'leuven t)
    ;;(setq sml/theme 'respectful)
    ;;(setq sml/no-confirm-load-theme t)
    ;;(sml/setup)
    ;;(set-face-attribute 'fringe nil :background nil)
  #+END_SRC
  
* better-default
  #+BEGIN_SRC emacs-lisp
    (tooltip-mode -1)
    (setq make-backup-files nil)
    (setq auto-save-default nil)
    (setq auto-save-list-file-prefix nil)
    ;;(global-auto-revert-mode t)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (put 'dired-find-alternate-file 'disabled nil)
    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
    (setq ediff-split-window-function 'split-window-horizontally)
    (require 'dired-x)
    (setq browse-url-browser-function 'browse-url-chromium)
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (global-set-key (kbd "C-w") 'backward-kill-word)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq uniquify-buffer-name-style 'forward)
    (setq save-interprogram-paste-before-kill t
	  mouse-yank-at-point t
	  ediff-window-setup-function 'ediff-setup-windows-plain)

    (global-set-key (kbd "M-/") 'hippie-expand)
    ;; windows enlarge or shrink
    (global-set-key (kbd "S-C-h") 'shrink-window-horizontally)
    (global-set-key (kbd "S-C-l") 'enlarge-window-horizontally)
    (global-set-key (kbd "S-C-j") 'shrink-window)
    (global-set-key (kbd "S-C-k") 'enlarge-window)
    ;; set magit-ediff-dwim-show-on-hunks to non-nil, ediff should only show
    ;; 2 windows
    (setq magit-ediff-dwim-show-on-hunks t)

    (define-key dired-mode-map
      (kbd "p")
      (lambda () (interactive) (dired-up-directory)))
    ;;(define-key ivy-minibuffer-map
    ;;  (kbd "C-a")
    ;;  )
  #+END_SRC

* org
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :config
      (define-key org-mode-map (kbd "C-c [") nil)
      (define-key org-mode-map (kbd "C-c ]") nil)
      (define-key org-mode-map (kbd "C-c ;") nil)
      (setq org-agenda-files (quote ("~/workspace/org/")))
      (setq org-todo-keywords
	    (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
		    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))
      (setq org-todo-state-tags-triggers
	    (quote (("CANCELLED" ("CANCELLED" . t))
		    ("WAITING" ("WAITING" . t))
		    ("HOLD" ("WAITING") ("HOLD" . t))
		    (done ("WAITING") ("HOLD"))
		    ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
		    ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
		    ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
      (setq org-capture-templates
	    (quote (("t" "todo" entry (file "~/workspace/org/refile.org")
		     "* TODO %?\n  %u\n  %A\n")
		    ("n" "note" entry (file "~//workspace/org/refile.org")
		     "* %? :NOTE:\n  %u\n  %A\n")
		    )))
      (setq org-refile-targets (quote ((nil :maxlevel . 9)
				       (org-agenda-files :maxlevel . 9))))
      )
  #+END_SRC

* navigation
** ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (setq enable-recursive-minibuffers t)
       (global-set-key "\C-s" 'swiper)
       (global-set-key "\M-x" 'counsel-M-x)
       (global-set-key (kbd "C-x C-i") 'counsel-imenu))
     (use-package swiper
       :ensure t)
     (use-package counsel-projectile
       :ensure t
       :config
       (projectile-mode 1))
     (use-package smex
       :ensure t)
   #+END_SRC

* evil
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :config
      (evil-mode 1)
      (setcdr evil-insert-state-map nil)
      (define-key evil-insert-state-map [escape] 'evil-normal-state)
      (define-key evil-motion-state-map (kbd "C-e") nil)
      (define-key evil-motion-state-map (kbd "C-y") nil)
      (define-key evil-motion-state-map (kbd "C-b") nil)
      (define-key evil-normal-state-map (kbd "C-p") nil)
      (define-key evil-motion-state-map (kbd "C-f") nil)
      (setq evil-scroll-count 1))
    (use-package evil-leader
      :ensure t
      :config
      (setq evil-leader/leader "SPC")
      (global-evil-leader-mode)
      (evil-leader/set-key
       "pf" 'counsel-projectile-find-file
       "sp" 'counsel-projectile-ag
       "sb" 'prelude-baidu
       "sg" 'prelude-google
       "sh" 'prelude-github))
  #+END_SRC

* misc
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :ensure t
      :config
      (require 'smartparens-config)
      (sp-local-pair 'go-mode "{" "}" :post-handlers '(:add ("||\n[i]" "RET"))))
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :ensure t
      :config
      (exec-path-from-shell-initialize))
    (use-package popwin
      :ensure t
      :config
      (popwin-mode t))
    (use-package hungry-delete
      :ensure t)
    (use-package google-translate
      :ensure t
      :bind
      ("C-c t" . google-translate-at-point))
    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  #+END_SRC

* jump
** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind
       ("M-s" . avy-goto-char))
   #+END_SRC

** window-numbering
   #+BEGIN_SRC emacs-lisp
     ;;(use-package window-numbering
     ;;  :ensure t
     ;;  :config
     ;;  (window-numbering-mode 1))
   #+END_SRC

* company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-tooltip-limit 5)
      (setq company-idle-delay 0.01)
      (setq company-echo-delay 0)                          ; remove annoying blinking
      (setq company-begin-commands '(self-insert-command))
      (setq company-minimum-prefix-length 3)
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous)
      (define-key company-active-map (kbd "C-w") nil))
  #+END_SRC

* git
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :config (define-key magit-mode-map
		(kbd "q")
		(lambda() (interactive) (magit-mode-bury-buffer t))))
    (use-package evil-magit
      :ensure t)
  #+END_SRC

* programming
** ggtags
   #+BEGIN_SRC emacs-lisp
     (use-package ggtags
       :ensure t)
   #+END_SRC

** synatax check
*** flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t)
    #+END_SRC

** language
*** elisp
    #+BEGIN_SRC emacs-lisp
      (add-hook 'emacs-lisp-mode-hook (lambda()
					(company-mode)
					(hungry-delete-mode)
					(smartparens-mode)
					))
    #+END_SRC

*** go
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
	:ensure t
	:config
	(add-hook 'go-mode-hook (lambda ()
				  (set (make-local-variable 'company-backends) '(company-go))
				  (company-mode)
				  (hungry-delete-mode)
				  (flycheck-mode)
				  (smartparens-mode)
				  (go-eldoc-setup)
				  (add-hook 'before-save-hook 'gofmt-before-save)
				  (setq tab-width 4)
				  (setq indent-tabs-mode 1)
				  (setq gofmt-command "goimports"))))
      (use-package go-rename
	:ensure t)
      (use-package go-guru
	:ensure t)
      (use-package go-eldoc
	:ensure t)
      (use-package company-go
	:ensure t)
      (use-package gotest
	:ensure t)
    #+END_SRC
    
*** json
    #+BEGIN_SRC emacs-lisp
      (use-package json-reformat
	:ensure t)
    #+END_SRC
*** javascript
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :config
        (setq auto-mode-alist
              (append
               '(("\\.js\\'" . js2-mode))
               auto-mode-alist))
      ;;  (add-to-list 'company-backends 'company-tern)
        (add-hook 'js2-mode-hook (lambda ()
                                   (set (make-local-variable 'company-backends) '(company-tern))
                                   (tern-mode)
                                   (company-mode)
                                   (hungry-delete-mode)
                                   (smartparens-mode)
                                   )))
      (use-package company-tern
        :ensure t
        :config)
    #+END_SRC
    
*** c or c++
    cd /usr/include && MAKEOBJDIRPREFIX=~/obj gtags -O && cd ~/proj1 && gtags && cd ~/proj2 && gtags
    #+BEGIN_SRC emacs-lisp
      (setq c-default-style "linux"
	    c-basic-offset 4)
      (add-hook 'c-mode-hook (lambda()
	 (ggtags-mode 1)
	 (smartparens-mode)
	 (company-mode)
	 (setenv "GTAGSLIBPATH" (concat "/usr/include"
					":"
					(file-truename "~/programming/c/redis/.ggtags/")))
	 (setenv "MAKEOBJDIRPREFIX" (file-truename "~/programming/c/redis/.ggtags/"))
	 (setq company-backends '((company-dabbrev-code company-gtags)))
	 (hungry-delete-mode)
	 ))
    #+END_SRC

    
*** python
    #+BEGIN_SRC emacs-lisp
      (use-package anaconda-mode
	:ensure t
	:config
	(add-hook 'python-mode-hook (lambda()
				      (anaconda-mode)
				      (anaconda-eldoc-mode)
				      (company-mode)
				      (set (make-local-variable 'company-backends) '(company-anaconda)))))
      (use-package company-anaconda
	:ensure t)
    #+END_SRC
    
* keybingding 
  #+BEGIN_SRC emacs-lisp
    ;;    (set-register ?e (cons 'file "~/.emacs.d/org/init.org"))
    ;;    (set-register ?g (cons 'file "~/workspace/gtd/gtd.org"))
    ;;    (set-register ?w (cons 'file "~/programming/golang/src/git.algor.tech/"))

    (evil-leader/set-key-for-mode 'go-mode "jd" 'godef-jump)
    (evil-leader/set-key-for-mode 'c-mode "jd" 'ggtags-find-definition)
    (define-key evil-normal-state-map (kbd "SPC TAB") 'switch-to-previous-buffer)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (global-set-key (kbd "C-x p") 'woocat/switch-project)
    (global-set-key (kbd "C-x C-r") 'counsel-recentf)
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x k") 'kill-this-buffer)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (setq google-translate-default-target-language "zh-CN")
    (setq google-translate-default-source-language "en")
  #+END_SRC
  
  
  
