* packages
  #+BEGIN_SRC emacs-lisp
    (defvar woocat/packages '(
                              org
                              ivy
                              swiper
                              evil
                              evil-leader
                              smartparens
                              exec-path-from-shell
                              popwin
                              hungry-delete
                              google-translate
                              avy
                              window-numbering
                              company
                              magit
                              evil-magit
                              flycheck
                              go-mode
                              go-eldoc
                              company-go
                              go-guru
                              rainbow-delimiters
                              counsel-projectile
                              use-package
                              diminish
                              bind-key
                              ggtags
                              )) 
    (setq package-selected-packages woocat/packages)
    (package-install-selected-packages)
  #+END_SRC

* func 
  #+BEGIN_SRC emacs-lisp
    ;; function to open init file
    (defun open-my-init-file()
      (interactive)
      (find-file "~/.emacs.d/org/init.org"))
    ;; function and micro to open browser,and search from google,
    ;; baidu, youtube, github and so on
    (defun prelude-search (query-url prompt)
      "Open the search url constructed with the QUERY-URL.
    PROMPT sets the `read-string prompt."
      (browse-url
       (concat query-url
               (url-hexify-string
                (if mark-active
                    (buffer-substring (region-beginning) (region-end))
                  (read-string prompt))))))

    (defmacro prelude-install-search-engine (search-engine-name search-engine-url search-engine-prompt)
      "Given some information regarding a search engine, install the interactive command to search through them"
      `(defun ,(intern (format "prelude-%s" search-engine-name)) ()
         ,(format "Search %s with a query or region if any." search-engine-name)
         (interactive)
         (prelude-search ,search-engine-url ,search-engine-prompt)))

    (prelude-install-search-engine "google"     "http://www.google.com/search?q="              "Google: ")
    (prelude-install-search-engine "youtube"    "http://www.youtube.com/results?search_query=" "Search YouTube: ")
    (prelude-install-search-engine "github"     "https://github.com/search?q="                 "Search GitHub: ")
    (prelude-install-search-engine "baidu" "https://www.baidu.com/s?wd="              "Baidu:")
    (defun switch-to-previous-buffer ()
      "Switch to previously open buffer.
    Repeated invocations toggle between the two most recently open buffers."
      (interactive)
      (switch-to-buffer (other-buffer (current-buffer) 1)))
    (defun my-imenu-rescan ()
      (interactive)
      (imenu 'func))
  #+END_SRC

* ui
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (set-default-font "Inconsolata 17" nil t)
    (setq inhibit-splash-screen t)
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    (use-package monokai-theme
      :ensure t)
    (load-theme 'monokai t)
  #+END_SRC

* better-default
  #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
    (setq auto-save-default nil)
    (setq auto-save-list-file-prefix nil)
    ;;(global-auto-revert-mode t)
    (fset 'yes-or-nop 'y-or-n-p)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (put 'dired-find-alternate-file 'disabled nil)
    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
    (setq ediff-split-window-function 'split-window-horizontally)
    (require 'dired-x)
    (setq browse-url-browser-function 'browse-url-chromium)
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (global-set-key (kbd "C-w") 'backward-kill-word)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq uniquify-buffer-name-style 'forward)
    (setq save-interprogram-paste-before-kill t
          mouse-yank-at-point t
          ediff-window-setup-function 'ediff-setup-windows-plain)
    (global-set-key (kbd "M-/") 'hippie-expand)
    (hl-line-mode 1)
  #+END_SRC

* org
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :bind
      (("C-c c" . org-capture)
      ("C-c a" . org-agenda))
      :config
      (setq org-agenda-files '("~/gtd/inbox.org"
                         "~/gtd/gtd.org"
                         "~/gtd/tickler.org"))
      (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                     (file+headline "~/gtd/inbox.org" "Tasks")
                                     "* TODO %i%?")
                                    ("T" "Tickler" entry
                                     (file+headline "~/gtd/tickler.org" "Tickler")
                                     "* %i%? \n %U")))
      (setq org-refile-targets '(("~/gtd/gtd.org" :maxlevel . 3)
                               ("~/gtd/someday.org" :level . 1)
                               ("~/gtd/tickler.org" :maxlevel . 2)))
      (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
      (setq org-src-fontify-natively t)
      )
  #+END_SRC

* navigation
** ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (global-set-key "\C-s" 'swiper)
       (global-set-key "\M-x" 'counsel-M-x)
       (global-set-key (kbd "C-x C-i") 'counsel-imenu))
     (use-package swiper
       :ensure t)
     (use-package counsel-projectile
       :ensure t)
   #+END_SRC

* evil
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :config
      (evil-mode 1)
      (setcdr evil-insert-state-map nil)
      (define-key evil-insert-state-map [escape] 'evil-normal-state)
      (define-key evil-motion-state-map (kbd "C-e") nil)
      (define-key evil-motion-state-map (kbd "C-y") nil)
      (define-key evil-motion-state-map (kbd "C-b") nil)
      (define-key evil-normal-state-map (kbd "C-p") nil)
      (define-key evil-motion-state-map (kbd "C-f") nil)
      (setq evil-scroll-count 1))
    (use-package evil-leader
      :ensure t
      :config
      (setq evil-leader/leader "SPC")
      (setq evil-want-C-u-scroll t)
      (global-evil-leader-mode)
      (evil-leader/set-key
       "pf" 'counsel-projectile-find-file
       "sp" 'counsel-projectile-ag
       "sb" 'prelude-baidu
       "sg" 'prelude-google
       "sh" 'prelude-github))
  #+END_SRC

* misc
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :ensure t
      :config
      (require 'smartparens-config))
    (use-package exec-path-from-shell
      :ensure t
      :if (memq window-system '(mac ns x))
      :config
      (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
      (exec-path-from-shell-initialize))
    (use-package popwin
      :ensure t
      :config
      (popwin-mode t))
    (use-package hungry-delete
      :ensure t)
    (use-package google-translate
      :ensure t
      :bind
      ("C-c t" . google-translate-at-point)
      :config
      (setq google-translate-default-source-language "en")
      (setq google-translate-default-target-language "zh-CN"))
    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  #+END_SRC

* jump
** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind
       ("M-s" . avy-goto-char))
   #+END_SRC

** window-numbering
   #+BEGIN_SRC emacs-lisp
     ;;(use-package window-numbering
     ;;  :ensure t
     ;;  :config
     ;;  (window-numbering-mode 1))
   #+END_SRC

* company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-tooltip-limit 5)
      (setq company-idle-delay 0.01)
      (setq company-echo-delay 0)                          ; remove annoying blinking
      (setq company-begin-commands '(self-insert-command))
      (setq company-minimum-prefix-length 3)
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous)
      (define-key company-active-map (kbd "C-w") nil))
  #+END_SRC

* git
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t)
    (use-package evil-magit
      :ensure t)
  #+END_SRC

* programming
** ggtags
   #+BEGIN_SRC emacs-lisp
     (use-package ggtags
       :ensure t)
   #+END_SRC
** synatax check
*** flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t)
    #+END_SRC

** language
*** elisp
    #+BEGIN_SRC emacs-lisp
      (add-hook 'emacs-lisp-mode-hook (lambda()
					(company-mode)
					(hungry-delete-mode)
					(smartparens-mode)
					))
    #+END_SRC

*** go
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :ensure t
        :config
        (add-hook 'go-mode-hook (lambda ()
                                  (set (make-local-variable 'company-backends) '(company-go))
                                  (company-mode)
                                  (hungry-delete-mode)
                                  (flycheck-mode)
                                  (smartparens-mode)
                                  (go-eldoc-setup)
                                  (add-hook 'before-save-hook 'gofmt-before-save)
                                  (setq tab-width 4)
                                  (setq indent-tabs-mode 1)
                                  (setq gofmt-command "goimports"))))
      (use-package go-guru
        :ensure t)
      (use-package go-eldoc
        :ensure t)
      (use-package company-go
        :ensure t)
      (sp-local-pair 'go-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
      (sp-local-pair 'go-mode "(" nil :post-handlers '((gofmt-befor-save "RET")))
      (sp-local-pair 'go-mode "[" nil :post-handlers '((gofmt-befor-save "RET")))
      
      (defun my-create-newline-and-enter-sexp (&rest _ignored)
        "Open a new brace or bracket expression, with relevant newlines and indent. "
        (newline)
        (forward-line -1)
        (indent-according-to-mode))
    #+END_SRC

*** c or c++
    cd /usr/include && MAKEOBJDIRPREFIX=~/obj gtags -O && cd ~/proj1 && gtags && cd ~/proj2 && gtags
    #+BEGIN_SRC emacs-lisp
      (setenv "GTAGSLIBPATH" (concat "/usr/include"
                                     ":"
                                     (file-truename "~/programming/c/redis")))
      (setenv "MAKEOBJDIRPREFIX" (file-truename "~/programming/c/redis/.ggtags"))
      (add-hook 'c-mode-hook (lambda ()
                               (company-mode)
                               (setq-default c-basic-offset 4)
                               (setq company-backends '((company-dabbrev-code company-gtags)))
                               (ggtags-mode 1)))
    #+END_SRC

* keybingding 
  #+BEGIN_SRC emacs-lisp
    (set-register ?e (cons 'file "~/.emacs.d/org/init.org"))
    (evil-leader/set-key-for-mode 'go-mode "jd" 'godef-jump)
    (evil-leader/set-key-for-mode 'c-mode "jd" 'ggtags-find-definition)
    (define-key evil-normal-state-map (kbd "SPC TAB") 'switch-to-previous-buffer)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

  #+END_SRC
  
  
  
